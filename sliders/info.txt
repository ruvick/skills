
SLICK SLIDER
====================================================================================================

Подключение

Сначала подключаем slick слайдер к сайту. Заходим на сайт https://kenwheeler.github.io/slick и скачиваем. Сохраняем в папку js.
Из множества файлов берем только slick.min.js. 

Поскольку slick слайдер работает с библиотекой jquerry, то подключаем ее. 
Заходим на офиц сайт jquerry.com и скачиваем. Либо берем ссылку с сайта и подключаем ее.

====================================================================================================

HTML Конструкция



<body>
<!-- Оболочка для демонстрации -->
 <div class="wrapper">
  <!-- Контент -->

  <!-- Оболочка Слайдера -->
  <div class="slider">

   <div class="slider__item filter">
    <img src="img/slides/big/02.jpg" alt="">
   </div>

   <div class="slider__item">
    <img src="img/slides/big/03.jpg" alt="">
   </div>

   <div class="slider__item filter">
    <img src="img/slides/big/04.jpg" alt="">
   </div>

   <div class="slider__item">
    <img src="img/slides/big/05.jpg" alt="">
   </div>

 </div>

Первым подключаем jQuery, затем Slick и только потом наши скрипты.
			
 <!-- Подключаем jQuery -->
 <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
 <!-- Подключаем слайдер Slick -->
 <script src="js/slick.min.js"></script>
 <!-- Подключаем файл скриптов -->
 <script src="js/script.js"></script>

</div>

</body>

====================================================================================================

CSS

После подключения слайдера в js, slick сам добавил в наш слайдер свои классы.

.slick-slider - общий класс slick слайдера.
.slick-initialized - класс который говорит о том, что слайдер запущен и инициализирован.

.slick-list - Ограничивающая оболочка, внутри которой еще одна оболочка slick-track.
.slick-track - сама лента слайдов. Которая будет двигаться внутри облочки slick-list.

Внутри slick-track находятся наши слайды, которые создали мы. Но мы видим намного больше слайдов,
чем мы сделали. Это все потому что по умолчанию слайдер у нас бесконечный. 

К нашему слайду item добавляются следующие классы:
.slick-slide - общий класс слайда. 
.slick-active - для слайда который мы видим, для активного слайда. И так же к нему добавляется класс
.slick-current - сообщает что этот слайд сейчас главный, основной.
Внутри каждого слайда мы просто найдем нашу картинку, которую мы указали.


Далее, для ленты .slick-track указываем display:flex; и у нас появяться картинки.
Для ограничивающей оболочки .slick-list указываем overflow:hidden;

Внимание!!! Если сложилась ситуация, когда слайдер находится либо внутри флекс элемента, либо он сам является 
флекс-элементом, тогда обязательно для флекс элемента min-width:0; Иначе слайдер работать не будет.
Пример.

 <div class="flex__column">
  <div class="slider">
  </div>
 </div>

.flex__column {
 min-width:0;
}

.slider {
 min-width:0;
}



Имена классов:

/* Слайдер */
.slick-slider{}

/* Слайдер запущен */
.slick-slider.slick-initialized{}

/* Слайдер с точками */
.slick-slider.slick-dotted{}

/* Ограничивающая оболочка */
.slick-list {}

/* Лента слайдов */
.slick-track{}

/* Слайд */
.slick-slide{}

/* Слайд активный (показывается) */
.slick-slide.slick-active{}

/* Слайд основной */
.slick-slide.slick-current{}

/* Слайд по центру */
.slick-slide.slick-center{}

/* Клонированный слайд */
.slick-slide.slick-cloned{}

/* Стрелка */
.slick-arrow{}

/* Стрелка влево */
.slick-arrow.slick-prev{}

/* Стрелка вправо */
.slick-arrow.slick-next{}

/* Стрелка не активная */
.slick-arrow.slick-disabled{}

/* Точки (булиты) */
.slick-dots{}
.slick-dots li{}

/* Активная точка */
.slick-dots li.slick-active{}

/* Элемент точки */
.slick-dots li button{}

===================================================================================================

JQUERRY

Включаем наш слайдер в java-script.
Копируем класс оболочки слайдера и обращаемся к нему.

$(document).ready(function){
 $('.slider').slick();
});

После этого слайдер у нас включен. Картинки пропадут и нужно стилизировать слайдер.


Множество параметров слайдера, для разных нужд.
$(document).ready(function){
 $('.slider').slick({
    arrows: true, - стрелки, по умолчанию true.
    dots: false, - точки, по умолчанию false.
    adaptiveHeight: false, - *автоматическая адаптивная высота слайдера. Будет автоматически подстраиваться по высоте, под конкретный слайд. По умолчанию false.
    slidesToShow: 1, - **указываем колличество слайдов, которые мы хотим отобразить сразу, за раз. По умолчанию 1. Укажем 3, покажется сразу 3, но листаться будет все еще по одному.
    slidesToScroll: 1, - указываем колличество слайдов, которые будут пролистываться за одно нажатие. По умолчанию 1.
    speed: 300, - отвечает за скорость пролистывания слайдов. По умолчанию 300. (миллисекунд).
    easing: 'linear', - отвечает за тип анимации при смене нашего слайда. По умолчанию 'linear'. Второе значение ease.
    infinite: true, - ***отвечает будет ли слайдер бесконечный. По умолчанию true.
    initialSlide: 0, - опция стартового слайда. С какого слайда будет показ. По умолчанию 0. 
    autoplay: false, - автоматическое проигрывание слайдов. По умолчанию false.
    autoplaySpeed: 500, - задает период автоматического проигрывания слайдов. По умолчанию 3000. 3секунды. Эта функция хорошо работает когда включенна функция infinite: true, бесконечного проигрывания слайдов.
    pauseOnFocus: true, - ставим на паузу автопроигрывание, когда кликнем мышкой на слайд. По умолчанию true.
    pauseOnHover: true, - ставим на паузу автопроигрывание, когда наводим мышкой на слайд. По умолчанию true.
    pauseOnDotsHover: true, - ставим на паузу автопроигрывание, когда наводим мышкой на точки. По умолчанию true.
    draggable: true, - позволяет зажать мышкой слайд и перетаскивать его на ПК. По умолчанию true.
    swipe: true, - позволяет зажать мышкой слайд и перетаскивать его на Мобилках. По умолчанию true.
    touchThreshold: 5, - отвечает за момент срабатывания слайда при свапе на Мобилках. По умолчанию 5. Увеличив до 10, будет достаточно просвайпить меньшее расстояние, чтобы передвинуть слайдер.
    touchMove: true, - ****включает все возможности тач скрина. По умолчанию true.
    waitForAnimate: true, - если мы его выключим, то слайдер станет мгновенно реагировать на колличество нажатий. По умолчанию true.
    centerMode: false, - *****при включении, главный слайд станет всегда по центру. По умолчанию false.
    variableWidth: false, - ******включаем, когда нам нужен автоматический адаптивный слайдер. По умолчанию false. Слайды прилипают друг к другу. Дает возможность самому контену определять ширину, расстояние между слайдами. Хорошо работает с centerMode.
    rows: 1, - ряды. Можем указать больше одного ряда. По умолчанию 1. Если укажем 2, слайдер станет в 2 этажа.
    slidesPerRow: 3, - колличество слайдов в ряду. По умолчанию 1.
    vertical: true, - вертикальный слайдер. По умолчанию false. Нужно убрать флекс, и поставить .slider-track {display:block;}. И для слайдов указать конкретную высоту .slider__item {height:225px;}. Прокрутка по умолчанию горизонтальная.
    verticalSwiping: true, - включает вертикальный свайпинг. По умолчанию false.
    asNavFor: .sliderbig, - *******связываем два слайдера. Когда листаем нижний маленький слайдер, то в верхнем большом, меняются изображения.
    responsive: [ - позволяет при определенном брекпоинте изменять те или иные свойства слайдера. 
       {
           breakpoint: 768,
           setting: {
              slidesToShow: 2
           },{
           breakpoint: 414,
           setting: {
              slidesToShow: 1
           }
       }
    ],
    mobileFirst: true, - при вычислении наших брекпоинтов поменяет значение max-width на min-width. Соответственно брекпоинт который указан выше, будет выводиться от 768 и выше.
    appendArrows: $('.block__arrow'), - * **перемещение стрелок в другой созданный блок div.
    appendDots: $('.block__arrow'), - * **перемещение точек в другой созданный блок div.
});
$(document).ready(function){
 $('.sliderbig').slick({ - второй слайдер. 
    arrows: false, 
    fade: true, - можем красиво листать верхний слайдер. Используется, когда на на большом верхнем слайдере основном отображается одна картинка.
    asNavFor: .slider, - *******связываем два слайдера. Когда листаем нижний маленький слайдер, то в верхнем большом, меняются изображения.
});
});


*Если нам нужно включить адаптивную высоту, то для .slick-track нам нужно добавить параметр align-items:flex-start, который прижмет наши слайды к верху.
**Когда мы указываем колличество слайдов при отстутствии каких либо других дополнительных опций, каждый наш слайд который мы создали .slider__item, 
   для него указывается реальная ширина. Берется область, делится на колличество которое мы указакли в опции slidesToShow и мы увидим в стилях ширину width,
   которая высчиталась и указывается. Ширина эта динамически изменяемая. При сужении экрана, она будет автоматичсеки высчитываться и меняться. 
***Для кнопки которая не кликабельна, появляется дополнительный класс .slick-disabled. Мы можем его стилизовать и сделать менее выделяющимся, например opacity:0.2.
****Если мы его выключим, то мы не сможем тянуть слайдер. Он будет переключаться, если мы свайпнем определенное расстояние, которое указанно в touchThreshold, 
    но именно передвигать слайд зажав пальцем, мы уже не сможем.
*****При включенной опции добавляется новый класс .slick-center. Выровним по центру наши слайды, для .slider__item {text-align:center;}. И для всех слайдов,
     уменьшим непрозрачность .slider__item {text-align:center; opacity:0.4;}. А центральному слайду вернем непрозрачность .slick-center {text-align:center;}.
     И добави к нашим слайдам эффект перехода .slider__item {text-align:center; opacity:0.4; transition:all 0.3s ease 0s;}.
******Комбинация двух функций variableWidth и centerMode очень полезна и очень часто используется.
*******Для каждого слайдера указываем слайдер который с ним связываем.
* **Создаем необходимый нам блок div например с классом .block__arrow и перемещаем туда кнопки записывая класс в значения этого свойства.


Описанны основные, часто используемые свойства. Больше свойств можно найти на сайте https://kenwheeler.github.io/slick

=====================================================================================================================================================================

Ленивая загрузка

Вслайде пишем data-lazy="" в img вместо src. А src убираем.

   <div class="slider__item filter">
    <img data-lazy="img/slides/big/02.jpg" alt="">
   </div>

 </div>

Ленивая загрузка позволяет нам подгружать изображения только тогда, когда это нужно. 

=====================================================================================================================================================================

Основные события слайдера

1. Событие до смены слайда - beforeChange.

$(document).ready(function){
 $('.slider').slick({
    dots: true, 
    slidesToShow: 3, 
 });
 $('.slider').on('beforeChange', function(event, slick, currentSlide, nextSlide){
    console.log(nextSlide);
 });
});


2. Событие после смены слайда - beforeChange.

$(document).ready(function){
 $('.slider').slick({
    dots: true, 
    slidesToShow: 3, 
 });
 $('.slider').on('afterChange', function(event, slick, currentSlide){
    console.log(currentSlide);
 });
});
 
====================================================================================================================================================


Основные методы слайдера

1. Метод setPosition. Стоит вызывать, когда нам нужно перезагрузить слайдер. Он высчитывает разные размеры слайдов, в зависимости от своего контейнера, 
оболочки в которой он находится. Если она изначально скрыта, display:none, а по нажатию какой то кнопки она показывается, 
и иногда могут возникать проблемы с подсчетом разных размеров и слайдер может работать неправильно, либо выглядеть неправильно.
Если такое случается, то стоит после предыдущего метода который открывает блок, после инициализации слайдера, стоит вызвать этот метод, указанный ниже.  

$(document).ready(function){
 $('.slider').slick({
    dots: true, 
    slidesToShow: 3, 
 });
 $('.slider').on('beforeChange', function(event, slick, currentSlide, nextSlide){
    console.log(nextSlide);
 });

 $('.slider').slick('setPosition'); - Метод setPosition.
}); 


2. Метод goTo. Этот метод позволяет нам пролистнуть до определенного слайда, например до 3его. На самом деле до 4го. Потому что подсчет идет с нуля.
0-1-2-3.
Может применяться везде где нам нужно управлять слайдером из других любых событий. 
Например у меня есть ссылка .link и при клике на нее я хочу, чтобы мой слайдер пролистнулся до 3го.

$(document).ready(function){
 $('.slider').slick({
    dots: true, 
    slidesToShow: 3, 
 });
 $('.slider').on('beforeChange', function(event, slick, currentSlide, nextSlide){
    console.log(nextSlide);
 });

 $('.link').click(function(event) { - Метод goTo. При клике по ссылке пролистывание к конкретному слайдеру.
    $('.slider').slick('goTo',3);
 }); 

 $('.link').click(function(event) { - При клике по любому обьекту которому присвоенн класс .link, я могу слайдер листнуть вперед или назад.
    $('.slider').slick('slickNext');
 }); 

 $('.link_play').click(function(event) { - При клике по любому обьекту которому присвоенн класс .link_play, я могу запустить autoPlay.
    $('.slider').slick('slickPlay');
 }); 
 $('.link_pause').click(function(event) { - При клике по любому обьекту которому присвоенн класс .link_pause, я могу поставить его на паузу.
    $('.slider').slick('slickPause');
 }); 

 $('.link_add').click(function(event) { - При клике добавляет или удаляет конкретные слайды.
    $('.slider').slick('slickAdd', '<div class="newslide">123</div>');
    return false;
 }); 

}); 


<a href="" class="link_add">Добавить</a>
<a href="" class="link_remove">Удалить</a>









